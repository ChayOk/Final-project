{"ast":null,"code":"import _toConsumableArray from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\OSPanel\\\\domains\\\\sportdata\\\\sportbook\\\\src\\\\components\\\\SportList.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { updateSports, updateCountries, updateTournaments } from '../store/sportsActions';\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    sports: state.sports,\n    countries: state.countries,\n    tournaments: state.tournaments\n    // events: state.events,\n  };\n};\n\nvar mapDispatchToProps = {\n  updateSports: updateSports,\n  updateCountries: updateCountries,\n  updateTournaments: updateTournaments\n  // updateEvents\n};\nvar SportList = /*#__PURE__*/function (_React$Component) {\n  _inherits(SportList, _React$Component);\n  _createClass(SportList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      // axios.get(`http://sportbook.loc/?api=sports`)\n      axios.get(\"http://localhost:8081/api/sports\").then(function (res) {\n        _this2.props.updateSports(res.data);\n      });\n\n      // axios.get(`http://sportbook.loc/?api=countries`)\n      axios.get(\"http://localhost:8081/api/countries\").then(function (res) {\n        _this2.props.updateCountries(res.data);\n      });\n\n      // axios.get(`http://sportbook.loc/?api=tournaments`)\n      axios.get(\"http://localhost:8081/api/tournaments\").then(function (res) {\n        _this2.props.updateTournaments(res.data);\n      });\n    }\n  }]);\n  function SportList(props) {\n    var _this;\n    _classCallCheck(this, SportList);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SportList).call(this, props));\n    // открыт ли спорт\n    _this.handleToggleSport = function (sportName) {\n      _this.setState(function (prevState) {\n        return {\n          expandedSports: _objectSpread({}, prevState.expandedSports, _defineProperty({}, sportName, !prevState.expandedSports[sportName]))\n        };\n      });\n    };\n    // открыта ли страна\n    _this.handleToggleCountry = function (sportName, countryName) {\n      _this.setState(function (prevState) {\n        return {\n          expandedCountries: _objectSpread({}, prevState.expandedCountries, _defineProperty({}, \"\".concat(sportName, \":\").concat(countryName), !prevState.expandedCountries[\"\".concat(sportName, \":\").concat(countryName)]))\n        };\n      });\n    };\n    _this.handleCheckboxChange = function (tournaments, isChecked) {\n      var selectedTournaments = _toConsumableArray(_this.state.selectedTournaments);\n      var index = selectedTournaments.findIndex(function (selectedTournament) {\n        return selectedTournament.id === tournaments.tournament_id;\n      });\n      if (isChecked && index === -1) {\n        // Add the tournament to the list of selected tournaments\n        selectedTournaments.push(tournaments);\n      } else if (!isChecked && index !== -1) {\n        // Remove the tournament from the list of selected tournaments\n        selectedTournaments.splice(index, 1);\n      }\n      // Update the component state\n      _this.setState({\n        selectedTournaments: selectedTournaments\n      });\n      console.log(tournaments.tournament_id);\n      // Navigate to the tournament details page\n      // this.props.history.push(`/events/${tournaments.tournament_id}`);\n    };\n    _this.state = {\n      expandedSports: {},\n      expandedCountries: {},\n      selectedTournaments: [] // add initial state for selectedTournaments\n    };\n    return _this;\n  }\n  _createClass(SportList, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      // Object to store tournaments by sport and country\n      var tournamentsBySportAndCountry = {};\n\n      // Iterate through each tournament in the props\n      Array.isArray(this.props.tournaments) && this.props.tournaments.forEach(function (tournament) {\n        // Check if sport and country are already stored\n        if (!tournamentsBySportAndCountry[tournament.sport_name]) {\n          tournamentsBySportAndCountry[tournament.sport_name] = {};\n        }\n        if (!tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name]) {\n          tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name] = {};\n        }\n\n        // Add tournament to corresponding group\n        if (!tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name][tournament.tournament_name]) {\n          tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name][tournament.tournament_name] = [];\n        }\n        tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name][tournament.tournament_name].push(tournament);\n      });\n\n      // Render sorted and grouped tournaments\n      return /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(tournamentsBySportAndCountry).map(function (sportName) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"sportItem\",\n          key: sportName,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          className: \"sportBtn\",\n          onClick: function onClick() {\n            return _this3.handleToggleSport(sportName);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }\n        }, sportName)), _this3.state.expandedSports[sportName] && Object.keys(tournamentsBySportAndCountry[sportName]).map(function (countryName) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"countryItem\",\n            key: \"\".concat(sportName, \":\").concat(countryName),\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"button\", {\n            className: \"countryBtn\",\n            onClick: function onClick() {\n              return _this3.handleToggleCountry(sportName, countryName);\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }\n          }, countryName)), _this3.state.expandedCountries[\"\".concat(sportName, \":\").concat(countryName)] && /*#__PURE__*/React.createElement(\"ul\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }\n          }, Object.keys(tournamentsBySportAndCountry[sportName][countryName]).map(function (tournamentName) {\n            var tournamentId = tournamentsBySportAndCountry[sportName][countryName][tournamentName][0].tournament_id;\n            var isChecked = _this3.state.selectedTournaments.some(function (tournament) {\n              return tournament.tournament_id === tournamentId;\n            });\n            return /*#__PURE__*/React.createElement(\"li\", {\n              key: \"\".concat(tournamentId, \":\").concat(tournamentName),\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 23\n              }\n            }, /*#__PURE__*/React.createElement(\"label\", {\n              className: \"labelBtn\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"tournamentTitle\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 27\n              }\n            }, tournamentName), /*#__PURE__*/React.createElement(Link, {\n              to: \"/events/\".concat(countryName, \"/\").concat(tournamentId),\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 27\n              }\n            }, /*#__PURE__*/React.createElement(\"input\", {\n              type: \"checkbox\",\n              className: \"tournamentCheckbox\",\n              checked: isChecked,\n              onChange: function onChange() {\n                return _this3.handleCheckboxChange({\n                  tournament_id: tournamentId\n                }, !isChecked);\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 29\n              }\n            }))));\n          })));\n        }));\n      }));\n    }\n  }]);\n  return SportList;\n}(React.Component);\nexport default connect(mapStateToProps, mapDispatchToProps)(SportList);\n\n// import React from 'react';\n// import axios from 'axios';\n// import { connect } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { updateSports, updateCountries, updateTournaments } from '../store/sportsActions';\n\n// const mapStateToProps = (state) => ({\n//   sports: state.sports,\n//   countries: state.countries,\n//   tournaments: state.tournaments,\n// });\n\n// const mapDispatchToProps = {\n//   updateSports,\n//   updateCountries,\n//   updateTournaments,\n// };\n\n// class SportList extends React.Component {\n//     componentDidMount() {\n//       axios.get(`http://sportbook.loc/?api=sports`)\n//         .then(res => {\n//           this.props.updateSports(res.data);\n//         });\n\n//       axios.get(`http://sportbook.loc/?api=countries`)\n//         .then(res => {\n//           this.props.updateCountries(res.data);\n//         });\n\n//       axios.get(`http://sportbook.loc/?api=tournaments`)\n//         .then(res => {\n//           this.props.updateTournaments(res.data);\n//         });\n//     }\n\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         expandedSports: {},\n//         expandedCountries: {},\n//         selectedTournaments: [], // add initial state for selectedTournaments\n//       };\n//     }\n\n//     // открыт ли спорт\n//     handleToggleSport = (sportName) => {\n//       this.setState(prevState => ({\n//         expandedSports: {\n//           ...prevState.expandedSports,\n//           [sportName]: !prevState.expandedSports[sportName],\n//         },\n//       }));\n//     }\n\n//     // открыта ли страна\n//     handleToggleCountry = (sportName, countryName) => {\n//       this.setState(prevState => ({\n//         expandedCountries: {\n//           ...prevState.expandedCountries,\n//           [`${sportName}:${countryName}`]: !prevState.expandedCountries[`${sportName}:${countryName}`],\n//         },\n//       }));\n//     }\n\n//     // Обновляет состояние компонента при изменении чекбокса\n//     handleCheckboxChange = (tournaments, isChecked) => {\n//       const selectedTournaments = [...this.state.selectedTournaments];\n//       const index = selectedTournaments.findIndex(selectedTournament => selectedTournament.id === tournaments.tournament_id);\n//       if (isChecked && index === -1) {\n//       // Add the tournament to the list of selected tournaments\n//       selectedTournaments.push(tournaments);\n//       } else if (!isChecked && index !== -1) {\n//       // Remove the tournament from the list of selected tournaments\n//       selectedTournaments.splice(index, 1);\n//       }\n//       // Update the component state\n//       this.setState({ selectedTournaments });\n//       }\n\n//       render() {\n//       const { sports, countries, tournaments } = this.props;\n//       const { expandedSports, expandedCountries, selectedTournaments } = this.state;\n//       return (\n//         <div className=\"SportList\">\n//           {sports.map(sport => {\n//             return (\n//               <div key={sport.id}>\n//                 <div className=\"SportList-sport\" onClick={() => this.handleToggleSport(sport.sport_name)}>\n//                   {sport.sport_name}\n//                 </div>\n//                 {expandedSports[sport.sport_name] && (\n//                   <div className=\"SportList-countries\">\n//                     {countries.map(country => {\n//                       const countryTournaments = tournaments.filter(tournament => tournament.country_id === country.id);\n//                       const selectedCountryTournaments = countryTournaments.filter(tournament => selectedTournaments.find(selectedTournament => selectedTournament.id === tournament.id));\n//                       const isCountryExpanded = expandedCountries[`${sport.sport_name}:${country.country_name}`];\n//                       return (\n//                         <div key={country.id}>\n//                           <div className=\"SportList-country\" onClick={() => this.handleToggleCountry(sport.sport_name, country.country_name)}>\n//                             {country.country_name}\n//                           </div>\n//                           {isCountryExpanded && (\n//                             <div className=\"SportList-tournaments\">\n//                               {countryTournaments.map(tournament => {\n//                                 const isChecked = selectedTournaments.find(selectedTournament => selectedTournament.id === tournament.id) !== undefined;\n//                                 return (\n//                                   <div className=\"SportList-tournament\" key={tournament.id}>\n//                                     <label>\n//                                       <input type=\"checkbox\" checked={isChecked} onChange={(event) => this.handleCheckboxChange(tournament, event.target.checked)} />\n//                                       {tournament.tournament_name}\n//                                     </label>\n//                                   </div>\n//                                 );\n//                               })}\n//                             </div>\n//                           )}\n//                           {selectedCountryTournaments.length > 0 && (\n//                             <div className=\"SportList-selected-tournaments\">\n//                               <div className=\"SportList-selected-tournaments-title\">\n//                                 Selected tournaments\n//                               </div>\n//                               {selectedCountryTournaments.map(tournament => {\n//                                 return (\n//                                   <div className=\"SportList-selected-tournament\" key={tournament.id}>\n//                                     <Link to={`/events/${tournament.id}`}>\n//                                       {tournament.tournament_name}\n//                                     </Link>\n//                                   </div>\n//                                 );\n//                               })}\n//                             </div>\n//                           )}\n//                         </div>\n//                       );\n//                     })}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n//         </div>\n//       );\n//     }\n//   }      \n\n//   export default connect(mapStateToProps, mapDispatchToProps)(SportList);","map":{"version":3,"names":["React","axios","connect","Link","updateSports","updateCountries","updateTournaments","mapStateToProps","state","sports","countries","tournaments","mapDispatchToProps","SportList","_React$Component","_inherits","_createClass","key","value","componentDidMount","_this2","get","then","res","props","data","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","handleToggleSport","sportName","setState","prevState","expandedSports","_objectSpread","_defineProperty","handleToggleCountry","countryName","expandedCountries","concat","handleCheckboxChange","isChecked","selectedTournaments","_toConsumableArray","index","findIndex","selectedTournament","id","tournament_id","push","splice","console","log","render","_this3","tournamentsBySportAndCountry","Array","isArray","forEach","tournament","sport_name","country_name","tournament_name","createElement","Fragment","Object","keys","map","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","tournamentName","tournamentId","some","to","type","checked","onChange","Component"],"sources":["C:/OSPanel/domains/sportdata/sportbook/src/components/SportList.js"],"sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { updateSports, updateCountries, updateTournaments } from '../store/sportsActions';\n\n\nconst mapStateToProps = (state) => ({\n  sports: state.sports,\n  countries: state.countries,\n  tournaments: state.tournaments,\n  // events: state.events,\n});\n\nconst mapDispatchToProps = {\n  updateSports,\n  updateCountries,\n  updateTournaments,\n  // updateEvents\n};\n\nclass SportList extends React.Component {\n  componentDidMount() {\n    // axios.get(`http://sportbook.loc/?api=sports`)\n    axios.get(`http://localhost:8081/api/sports`)\n      .then(res => {\n        this.props.updateSports(res.data);\n      });\n\n    // axios.get(`http://sportbook.loc/?api=countries`)\n    axios.get(`http://localhost:8081/api/countries`)\n      .then(res => {\n        this.props.updateCountries(res.data);\n      });\n\n    // axios.get(`http://sportbook.loc/?api=tournaments`)\n    axios.get(`http://localhost:8081/api/tournaments`)\n      .then(res => {\n        this.props.updateTournaments(res.data);\n      });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      expandedSports: {},\n      expandedCountries: {},\n      selectedTournaments: [], // add initial state for selectedTournaments\n    };\n  }\n\n  // открыт ли спорт\n  handleToggleSport = (sportName) => {\n    this.setState(prevState => ({\n      expandedSports: {\n        ...prevState.expandedSports,\n        [sportName]: !prevState.expandedSports[sportName],\n      },\n    }));\n  }\n\n  // открыта ли страна\n  handleToggleCountry = (sportName, countryName) => {\n    this.setState(prevState => ({\n      expandedCountries: {\n        ...prevState.expandedCountries,\n        [`${sportName}:${countryName}`]: !prevState.expandedCountries[`${sportName}:${countryName}`],\n      },\n    }));\n  }\n  handleCheckboxChange = (tournaments, isChecked) => {\n    const selectedTournaments = [...this.state.selectedTournaments];\n    const index = selectedTournaments.findIndex(selectedTournament => selectedTournament.id === tournaments.tournament_id);\n    if (isChecked && index === -1) {\n      // Add the tournament to the list of selected tournaments\n      selectedTournaments.push(tournaments);\n    } else if (!isChecked && index !== -1) {\n      // Remove the tournament from the list of selected tournaments\n      selectedTournaments.splice(index, 1);\n    }\n    // Update the component state\n    this.setState({ selectedTournaments });\n    console.log(tournaments.tournament_id);\n    // Navigate to the tournament details page\n    // this.props.history.push(`/events/${tournaments.tournament_id}`);\n  }\n\n  render() {\n  // Object to store tournaments by sport and country\n  const tournamentsBySportAndCountry = {};\n\n  // Iterate through each tournament in the props\n  Array.isArray(this.props.tournaments) && this.props.tournaments.forEach(tournament => {\n    // Check if sport and country are already stored\n    if (!tournamentsBySportAndCountry[tournament.sport_name]) {\n      tournamentsBySportAndCountry[tournament.sport_name] = {};\n    }\n    if (!tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name]) {\n      tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name] = {};\n    }\n\n    // Add tournament to corresponding group\n    if (!tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name][tournament.tournament_name]) {\n      tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name][tournament.tournament_name] = [];\n    }\n    tournamentsBySportAndCountry[tournament.sport_name][tournament.country_name][tournament.tournament_name].push(tournament);\n  });\n\n  // Render sorted and grouped tournaments\n  return (\n    <>\n      {Object.keys(tournamentsBySportAndCountry).map(sportName => (\n        <li className=\"sportItem\" key={sportName}>\n          <button className=\"sportBtn\" onClick={() => this.handleToggleSport(sportName)}>\n            <div>{sportName}</div>\n          </button>\n          {this.state.expandedSports[sportName] && Object.keys(tournamentsBySportAndCountry[sportName]).map(countryName => (\n            <div className=\"countryItem\" key={`${sportName}:${countryName}`}>\n              <button className=\"countryBtn\" onClick={() => this.handleToggleCountry(sportName, countryName)}>\n                <div>{countryName}</div>\n              </button>\n              {this.state.expandedCountries[`${sportName}:${countryName}`] && (\n                <ul>\n                  {Object.keys(tournamentsBySportAndCountry[sportName][countryName]).map(tournamentName => {\n                    const tournamentId = tournamentsBySportAndCountry[sportName][countryName][tournamentName][0].tournament_id;\n                    const isChecked = this.state.selectedTournaments.some(tournament => tournament.tournament_id === tournamentId);\n                    return (\n                      <li key={`${tournamentId}:${tournamentName}`}>\n                        <label className='labelBtn'>\n                          <span className='tournamentTitle'>\n                            {tournamentName}\n                          </span>\n                          \n                          <Link to={`/events/${countryName}/${tournamentId}`}>\n                            <input\n                            type=\"checkbox\"\n                            className=\"tournamentCheckbox\"\n                            checked={isChecked}\n                            onChange={() => this.handleCheckboxChange({tournament_id: tournamentId}, !isChecked)}\n                          />\n                          </Link>\n                        </label>\n                      </li>\n                    );\n                  })}\n                </ul>\n              )}\n            </div>\n          ))}\n        </li>\n      ))}\n    </>\n  );\n}\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SportList);\n\n\n// import React from 'react';\n// import axios from 'axios';\n// import { connect } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { updateSports, updateCountries, updateTournaments } from '../store/sportsActions';\n\n// const mapStateToProps = (state) => ({\n//   sports: state.sports,\n//   countries: state.countries,\n//   tournaments: state.tournaments,\n// });\n\n// const mapDispatchToProps = {\n//   updateSports,\n//   updateCountries,\n//   updateTournaments,\n// };\n\n// class SportList extends React.Component {\n//     componentDidMount() {\n//       axios.get(`http://sportbook.loc/?api=sports`)\n//         .then(res => {\n//           this.props.updateSports(res.data);\n//         });\n  \n//       axios.get(`http://sportbook.loc/?api=countries`)\n//         .then(res => {\n//           this.props.updateCountries(res.data);\n//         });\n  \n//       axios.get(`http://sportbook.loc/?api=tournaments`)\n//         .then(res => {\n//           this.props.updateTournaments(res.data);\n//         });\n//     }\n  \n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         expandedSports: {},\n//         expandedCountries: {},\n//         selectedTournaments: [], // add initial state for selectedTournaments\n//       };\n//     }\n  \n//     // открыт ли спорт\n//     handleToggleSport = (sportName) => {\n//       this.setState(prevState => ({\n//         expandedSports: {\n//           ...prevState.expandedSports,\n//           [sportName]: !prevState.expandedSports[sportName],\n//         },\n//       }));\n//     }\n  \n//     // открыта ли страна\n//     handleToggleCountry = (sportName, countryName) => {\n//       this.setState(prevState => ({\n//         expandedCountries: {\n//           ...prevState.expandedCountries,\n//           [`${sportName}:${countryName}`]: !prevState.expandedCountries[`${sportName}:${countryName}`],\n//         },\n//       }));\n//     }\n  \n//     // Обновляет состояние компонента при изменении чекбокса\n//     handleCheckboxChange = (tournaments, isChecked) => {\n//       const selectedTournaments = [...this.state.selectedTournaments];\n//       const index = selectedTournaments.findIndex(selectedTournament => selectedTournament.id === tournaments.tournament_id);\n//       if (isChecked && index === -1) {\n//       // Add the tournament to the list of selected tournaments\n//       selectedTournaments.push(tournaments);\n//       } else if (!isChecked && index !== -1) {\n//       // Remove the tournament from the list of selected tournaments\n//       selectedTournaments.splice(index, 1);\n//       }\n//       // Update the component state\n//       this.setState({ selectedTournaments });\n//       }\n      \n//       render() {\n//       const { sports, countries, tournaments } = this.props;\n//       const { expandedSports, expandedCountries, selectedTournaments } = this.state;\n//       return (\n//         <div className=\"SportList\">\n//           {sports.map(sport => {\n//             return (\n//               <div key={sport.id}>\n//                 <div className=\"SportList-sport\" onClick={() => this.handleToggleSport(sport.sport_name)}>\n//                   {sport.sport_name}\n//                 </div>\n//                 {expandedSports[sport.sport_name] && (\n//                   <div className=\"SportList-countries\">\n//                     {countries.map(country => {\n//                       const countryTournaments = tournaments.filter(tournament => tournament.country_id === country.id);\n//                       const selectedCountryTournaments = countryTournaments.filter(tournament => selectedTournaments.find(selectedTournament => selectedTournament.id === tournament.id));\n//                       const isCountryExpanded = expandedCountries[`${sport.sport_name}:${country.country_name}`];\n//                       return (\n//                         <div key={country.id}>\n//                           <div className=\"SportList-country\" onClick={() => this.handleToggleCountry(sport.sport_name, country.country_name)}>\n//                             {country.country_name}\n//                           </div>\n//                           {isCountryExpanded && (\n//                             <div className=\"SportList-tournaments\">\n//                               {countryTournaments.map(tournament => {\n//                                 const isChecked = selectedTournaments.find(selectedTournament => selectedTournament.id === tournament.id) !== undefined;\n//                                 return (\n//                                   <div className=\"SportList-tournament\" key={tournament.id}>\n//                                     <label>\n//                                       <input type=\"checkbox\" checked={isChecked} onChange={(event) => this.handleCheckboxChange(tournament, event.target.checked)} />\n//                                       {tournament.tournament_name}\n//                                     </label>\n//                                   </div>\n//                                 );\n//                               })}\n//                             </div>\n//                           )}\n//                           {selectedCountryTournaments.length > 0 && (\n//                             <div className=\"SportList-selected-tournaments\">\n//                               <div className=\"SportList-selected-tournaments-title\">\n//                                 Selected tournaments\n//                               </div>\n//                               {selectedCountryTournaments.map(tournament => {\n//                                 return (\n//                                   <div className=\"SportList-selected-tournament\" key={tournament.id}>\n//                                     <Link to={`/events/${tournament.id}`}>\n//                                       {tournament.tournament_name}\n//                                     </Link>\n//                                   </div>\n//                                 );\n//                               })}\n//                             </div>\n//                           )}\n//                         </div>\n//                       );\n//                     })}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n//         </div>\n//       );\n//     }\n//   }      \n\n//   export default connect(mapStateToProps, mapDispatchToProps)(SportList); "],"mappings":"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},"metadata":{},"sourceType":"module"}